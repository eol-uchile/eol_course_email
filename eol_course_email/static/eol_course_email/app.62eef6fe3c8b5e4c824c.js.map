{"version":3,"sources":["webpack:///./src/i18n/index.jsx","webpack:///./src/course_email/helpers/getUserEmail.jsx","webpack:///./src/course_email/helpers/getUsers.jsx","webpack:///./src/course_email/hooks/useFetchUserData.jsx","webpack:///./src/course_email/components/Menu.jsx","webpack:///./src/course_email/helpers/postSendEmail.jsx","webpack:///./src/course_email/hooks/useForm.jsx","webpack:///./src/course_email/components/StatusForm.jsx","webpack:///./src/course_email/components/NewEmailForm.jsx","webpack:///./src/course_email/components/EmailModal.jsx","webpack:///./src/course_email/components/EmailItem.jsx","webpack:///./src/course_email/components/EmptyGrid.jsx","webpack:///./src/course_email/components/EmailGrid.jsx","webpack:///./src/course_email/hooks/useResizeIFrame.jsx","webpack:///./src/course_email/helpers/getReceivedEmails.jsx","webpack:///./src/course_email/helpers/getSendedEmails.jsx","webpack:///./src/course_email/CourseEmailPage.jsx","webpack:///./src/course_email/helpers/getCourseInfo.jsx","webpack:///./src/assets/favicon.ico","webpack:///./src/index.jsx"],"names":["messages","ar","arMessages","fr","ca","caMessages","he","id","pl","ru","th","uk","getUserEmail","courseId","url","fetch","credentials","response","status","json","data","getUsers","users","map","u","username","name","profile__name","toLowerCase","has_role","users_cache","Menu","useState","email","loading","state","setState","useEffect","then","useFetchUserEmail","className","Spinner","animation","variant","href","target","to","Button","size","icon","faArrowDown","faArrowUp","faPaperPlane","propTypes","PropTypes","string","isRequired","postSendEmail","formData","getAuthenticatedHttpClient","post","catch","error","ERROR_MESSAGES","customAttributes","httpErrorStatus","code","StatusForm","Alert","NewEmailForm","length","useFetchUsers","initialState","values","setValues","handleInputChange","handleCheckboxChange","value","target_values","checked","splice","indexOf","handleSubmit","e","preventDefault","window","parent","scrollTo","validateInputs","status_text","resetForm","studentsInput","staffInput","useForm","subjectInput","messageInput","Form","onSubmit","Row","Group","controlId","Label","Control","required","placeholder","aria-describedby","onChange","as","Col","filter","user","Check","type","key","label","includes","disabled","EmailModal","modalState","setModalState","resetModalWrapperState","modalRef","useRef","useLayoutEffect","current","modalBodyRef","offsetTop","Modal","ref","open","title","body","date","sender","subject","message","receiver_users","onClose","buttons","onClick","data-autofocus","renderDefaultCloseButton","dialogClassName","object","bool","func","EmailItem","IconButton","faInfo","alt","EmptyGrid","faFrown","lastHeight","lastWidth","EmailGrid","getEmails","emails","useFetchEmails","index","dispatchResizeMessage","event","eventType","newHeight","document","getElementById","offsetHeight","newWidth","offsetWidth","postMessage","payload","width","height","referrer","getReceivedEmails","sender_user__profile__name","Date","created_at","$date","toLocaleString","getSendedEmails","sender_user","receiver_users_list","CourseEmailPage","MutationObserver","observe","attributes","childList","subtree","addEventListener","removeEventListener","location","hash","substring","split","pop","exact","path","subscribe","APP_READY","ReactDOM","render","AppProvider","APP_INIT_ERROR","ErrorPage","initialize","appMessages"],"mappings":"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","file":"app.62eef6fe3c8b5e4c824c.js","sourcesContent":["import arMessages from './messages/ar.json';\nimport caMessages from './messages/ca.json';\n// no need to import en messages-- they are in the defaultMessage field\nimport es419Messages from './messages/es_419.json';\nimport frMessages from './messages/fr.json';\nimport zhcnMessages from './messages/zh_CN.json';\nimport heMessages from './messages/he.json';\nimport idMessages from './messages/id.json';\nimport kokrMessages from './messages/ko_kr.json';\nimport plMessages from './messages/pl.json';\nimport ptbrMessages from './messages/pt_br.json';\nimport ruMessages from './messages/ru.json';\nimport thMessages from './messages/th.json';\nimport ukMessages from './messages/uk.json';\n\nconst messages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  ca: caMessages,\n  he: heMessages,\n  id: idMessages,\n  'ko-kr': kokrMessages,\n  pl: plMessages,\n  'pt-br': ptbrMessages,\n  ru: ruMessages,\n  th: thMessages,\n  uk: ukMessages,\n};\n\nexport default messages;\n","/* \n* Async function that calls eol_course_email api \n* It will return a string with user email\n*/\n\nexport const getUserEmail = async( courseId ) => {\n    const url = `/courses/${ courseId }/course_emails/user_email`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        return data;\n    } else {\n        return [];\n    }\n    \n};","/* \n* Async function that calls eol_course_email api \n* It will return a object with users enrolled\n*/\n\nexport const getUsers = async( courseId ) => {\n    const url = `/courses/${ courseId }/course_emails/users`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        const users = data.map( u => {\n            return {\n                username    : u.username,\n                name        : u.profile__name.toLowerCase(),\n                has_role    : u.has_role\n            }\n        });\n        return users;\n    } else {\n        return [];\n    }\n    \n};","import { useState, useEffect } from \"react\";\nimport { getUserEmail } from \"../helpers/getUserEmail\";\nimport { getUsers } from '../helpers/getUsers';\n\nexport const useFetchUserEmail = ( courseId ) =>  {\n    /*\n        Fetch user email\n    */\n    const [state, setState] = useState({\n        email: \"\",\n        loading: true\n    })\n\n    useEffect( () => {\n        getUserEmail( courseId )\n        .then( email => {\n            setState({\n                email: email,\n                loading: false\n            });\n        }) \n    }, [ ]);\n\n    return state;\n}\n\nexport const useFetchEmails = ( courseId, getEmails ) =>  {\n    /*\n        Fetch received/sended emails\n    */\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n        setState({\n            data: [],\n            loading: true\n        });\n        getEmails( courseId )\n            .then( emails => {\n                setState({\n                    data: emails,\n                    loading: false\n                });\n            }) \n    }, [ getEmails ]);\n\n    return state;\n}\n\n\nvar users_cache = [];\n\nexport const useFetchUsers = ( courseId ) =>  {\n    /*\n        Fetch users enrolled\n    */\n    const [state, setState] = useState({\n        users: [],\n        loading: true\n    })\n\n    useEffect( () => {\n        if ( users_cache.length != 0 ) {\n            setState({\n                users: users_cache,\n                loading: false\n            });\n        } else {\n            getUsers( courseId )\n            .then( users => {\n                users_cache = users;\n                setState({\n                    users: users,\n                    loading: false\n                });\n            }) \n        }\n    }, [ ]);\n\n    return state;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@edx/paragon';\nimport { Link } from 'react-router-dom';\nimport { Spinner } from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { useFetchUserEmail } from '../hooks/useFetchUserData';\n\nexport default function Menu({ courseId }) {\n    const { email, loading } = useFetchUserEmail(courseId);\n\n    return (\n        <div className=\"my-2\">\n            <div className=\"d-flex justify-content-center text-muted small\">\n                { loading && <Spinner animation=\"border\" variant=\"primary\" className=\"mx-auto mt-2 \"/> }\n                { !loading && <p>El correo electrónico que tienes registrado en la plataforma es <strong className=\"text-uppercase\">{ email }</strong> <i>(<a href=\"/account/settings\" target=\"_parent\">Actualizar correo</a>)</i></p> }\n            </div>\n            <div className=\"d-flex\">\n                <Link to={`/eol/eol_course_email/static/received/`}>\n                    <Button variant=\"outline-primary shadow-sm\" size=\"sm\"><FontAwesomeIcon icon={faArrowDown} className=\"mr-2\" />Recibidos</Button>\n                </Link>\n                <Link to={`/eol/eol_course_email/static/sended/`} className=\"mr-auto\">\n                    <Button variant=\"outline-primary shadow-sm\" size=\"sm\" className=\"mx-3\"><FontAwesomeIcon icon={faArrowUp} className=\"mr-2\" />Enviados</Button>\n                </Link>\n                <Link to={`/eol/eol_course_email/static/new/`}>\n                    <Button variant=\"primary shadow-sm\" size=\"sm\"><FontAwesomeIcon icon={faPaperPlane} className=\"mr-2\" />Nuevo Correo</Button>\n                </Link>\n            </div>\n            \n        </div>\n        \n    )\n}\n\nMenu.propTypes = {\n    courseId       : PropTypes.string.isRequired\n}","/* \n* Async function that calls eol_course_email api \n* It will send the email to all destinataries\n*/\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport const postSendEmail = async( formData ) => {\n    const url = `/courses/${ formData.courseId }/course_emails/send`;\n    const response = await getAuthenticatedHttpClient()\n        .post(url, formData, 'json')\n        .then(({status}) => {\n            return {\n                \"status\"    : status == 201,\n                \"status_text\"   : \"success\"\n            }\n        })\n        .catch( (error) => {\n            return {\n                \"status\"    : false,\n                \"status_text\"   : ERROR_MESSAGES(error.customAttributes?.httpErrorStatus),\n            }\n        });\n    return response;\n};\n\nconst ERROR_MESSAGES = (code=400) => {\n    switch (code) {\n        case 403:\n            return \"ratelimit\";\n        default:\n            return \"fail\";\n    }\n}","import { useState } from \"react\"\nimport { postSendEmail } from \"../helpers/postSendEmail\";\n\nexport const useForm = ( initialState = {} ) => {\n    const [values, setValues] = useState(initialState);\n\n    const handleInputChange = ( { target } ) => {\n        /*\n            Handle Input changes\n        */\n        if( target.name === 'studentsInput' || target.name ===  'staffInput' ){\n            handleCheckboxChange(target);\n        } else {\n            setValues({\n                ...values,\n                [ target.name ]: target.value \n            })\n        }\n        \n    }\n\n    const handleCheckboxChange = ( target ) => {\n        /*\n            Handle Checkbox Change\n            Add/remove users from State list\n        */\n        let target_values = [...values[target.name]];\n        if( target.checked ) {\n            setValues({\n                ...values,\n                [ target.name ]: [...target_values, target.id ]\n            });\n        } else {\n            target_values.splice(target_values.indexOf(target.id),1); // Remove user from list\n            setValues({\n                ...values,\n                [ target.name ]: target_values\n            });\n        }\n    }\n\n    const handleSubmit = (e) => {\n        /*\n            Handle form submit and send Email\n        */\n        e.preventDefault();\n        window.parent.parent.scrollTo(0, 150); // Scroll to top (status info)\n        if( validateInputs() ) {\n            setValues({\n                ...values,\n                status: \"pending\"\n            });\n            postSendEmail( values )\n                .then( ({ status, status_text }) => {\n                    if (status) {\n                        resetForm(status_text);\n                    } else {\n                        setValues({\n                            ...values,\n                            status: status_text\n                        });\n                    }\n            }); \n\n        }\n        \n        \n    }\n\n    const validateInputs = () => {\n        /*\n            Validate list length\n        */\n        const { studentsInput, staffInput } = values;\n        if(studentsInput.length + staffInput.length == 0) {\n            setValues({\n                ...values,\n                status: \"empty-list\"\n            });\n            return false;\n        }\n        return true;\n    }\n\n    const resetForm = (status='initialized') => {\n        /*\n            Clear form\n        */\n        setValues({\n            ...initialState,\n            status: status\n        });\n    }\n\n    return [ values, handleInputChange, handleSubmit ];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner, Alert} from '@edx/paragon';\n\nexport const StatusForm = ({status}) => {\n    switch (status) {\n        case \"pending\":\n            return(\n                <Spinner animation=\"border\" variant=\"primary\" className=\"d-flex mx-auto mt-2 \"/>\n            );\n        case \"ratelimit\":\n            return(\n                <Alert variant=\"danger\" className=\"mx-4 mt-3 text-center w-100 shadow\">\n                    <strong>Has enviado muchos correos, por favor intenta nuevamente en unos minutos.</strong>\n                </Alert>\n            );\n        case \"fail\":\n            return(\n                <Alert variant=\"danger\" className=\"mx-4 mt-3 text-center w-100 shadow\">\n                    Error al enviar correo. Intentar nuevamente.\n                </Alert>\n            );\n        case \"success\":\n            return(\n                <Alert variant=\"success\" className=\"mx-4 mt-3 text-center w-100 shadow\">\n                    <strong>Tu mensaje fue procesado con éxito para ser enviado</strong>.<br/>Los destinatarios comenzarán a recibir el correo en los próximos minutos.\n                </Alert>\n            );\n        case \"empty-list\":\n            return(\n                <Alert variant=\"warning\" className=\"mx-4 mt-3 text-center w-100 shadow\">\n                    <strong>Debes seleccionar al menos un destinatario.</strong>\n                </Alert>\n            );\n    \n        default:\n            return(\n                <>\n                </>\n            );\n    }\n}\n\nStatusForm.propTypes = {\n    status       : PropTypes.string.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchUsers } from '../hooks/useFetchUserData';\nimport { useForm } from '../hooks/useForm';\nimport { Spinner, Form, Button, Col } from '@edx/paragon';\nimport { StatusForm } from './StatusForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\n\nexport const NewEmailForm = ( { courseId } ) => {\n    const { users, loading } = useFetchUsers( courseId );\n    const [ values, handleInputChange, handleSubmit] = useForm({\n        status: \"initialized\",\n        subjectInput    : \"\",\n        messageInput   : \"\",\n        studentsInput: [],\n        staffInput: [],\n        courseId: courseId\n    })\n    const { status, subjectInput, messageInput, studentsInput, staffInput } = values;\n\n    return (\n        <div className=\"rounded-lg shadow-lg py-4 px-5 my-2\">\n            <h3>Formulario Nuevo Correo </h3>\n            <Form onSubmit={handleSubmit}>\n                <Form.Row className=\"form-status\">\n                    <StatusForm status={status} />\n                </Form.Row>\n                <Form.Group controlId=\"formGridSubject\">\n                    <Form.Label className=\"lead\">Asunto</Form.Label>\n                    <Form.Control required placeholder=\"Asunto del correo\" aria-describedby=\"subjectInput\" name=\"subjectInput\" onChange={ handleInputChange } value={subjectInput}/>\n                </Form.Group>\n                <Form.Group controlId=\"formGridMessage\">\n                    <Form.Label className=\"lead\">Mensaje</Form.Label>\n                    <Form.Control required as=\"textarea\" placeholder=\"Mensaje del correo\" aria-describedby=\"messageInput\" name=\"messageInput\" onChange={ handleInputChange } value={messageInput}/>\n                </Form.Group>\n                <hr/>\n                <Form.Group id=\"formGridCheckbox\">\n                </Form.Group>\n                <Form.Row>\n                    { loading && <Spinner animation=\"border\" variant=\"primary\" className=\"d-flex mx-auto mt-2 \"/> }\n                    <Form.Group as={Col} controlId=\"formGridReceiverStudent\" className=\"checkbox-group\">\n                        <Form.Label className=\"lead\">Destinatarios 'Estudiantes'</Form.Label>\n                        <div className=\"checkbox-input\">\n                            {\n                                users\n                                .filter( ({has_role}) => !has_role )\n                                .map( (user) => (\n                                    <Form.Check \n                                        type=\"checkbox\" \n                                        className=\"pl-0\"\n                                        name=\"studentsInput\"\n                                        id={ user.username }\n                                        key={ user.username }\n                                        label={ user.name }\n                                        onChange={ handleInputChange }\n                                        checked={ studentsInput.includes(user.username) }\n                                    />\n                                ))\n                            }\n                        </div>\n                        \n                    </Form.Group>\n                    \n                    <Form.Group as={Col} controlId=\"formGridReceiverStaff\" className=\"checkbox-group\">\n                        <Form.Label className=\"lead\">Destinatarios 'Equipo docente'</Form.Label>\n                        <div className=\"checkbox-input\">\n                            {\n                                users\n                                .filter( ({has_role}) => has_role )\n                                .map( (user) => (\n                                    <Form.Check \n                                        type=\"checkbox\" \n                                        className=\"pl-0\"\n                                        name=\"staffInput\"\n                                        id={ user.username }\n                                        key={ user.username }\n                                        label={ user.name }\n                                        onChange={ handleInputChange }\n                                        checked={ staffInput.includes(user.username) }\n                                    />\n                                ))\n                            }\n                        </div>\n                        \n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Button variant=\"outline-primary shadow-lg\" size=\"lg\" type=\"submit\" className=\"mx-auto\" disabled={status=='pending'}>\n                        <FontAwesomeIcon icon={faPaperPlane} className=\"mr-2\" /> Enviar Correo\n                    </Button>\n                </Form.Row>\n            </Form>\n        </div>\n    )\n}\n\nNewEmailForm.propTypes = {\n    courseId       : PropTypes.string.isRequired\n}","import React, { useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button } from '@edx/paragon';\n\nexport const EmailModal = ({ email, modalState, setModalState }) => {\n\n    const resetModalWrapperState = () => setModalState(false);\n\n    const modalRef = useRef(null)\n    // IFrame modal is stuck at the top so we have to scroll page. \n    useLayoutEffect(() => window.parent.parent.scrollTo(0, modalRef.current.modalBodyRef.current.offsetTop), [ ]);\n\n    const body = () => (\n      <div className=\"row px-2\">\n        <div className=\"font-weight-bold col col-3 py-2\">\n          Fecha\n        </div>\n        <div className=\"col col-9 py-2\">\n          { email.date }\n        </div>  \n\n        <div className=\"font-weight-bold col col-3 py-2\">\n          Enviado por\n        </div>\n        <div className=\"col col-9 py-2 text-capitalize\">\n          { email.sender }\n        </div> \n\n        <div className=\"font-weight-bold col col-3 py-2\">\n          Asunto\n        </div>\n        <div className=\"col col-9 py-2\">\n          { email.subject }\n        </div> \n\n        <div className=\"font-weight-bold col col-3 py-2\">\n          Contenido\n        </div>\n        <div className=\"text-justify col col-9 py-2\">\n          { email.message }\n        </div>\n        \n        { \n          email.receiver_users\n          &&\n          (\n            <>\n              <div className=\"font-weight-bold col col-3 py-2\">\n                Destinatarios ({ email.receiver_users.length })\n              </div>\n              <div className=\"text-justify col col-9 py-2\">\n                <ol>\n                  {\n                    email.receiver_users.map((user) => {\n                      return(\n                        <li key={ user } className=\"text-capitalize\">\n                          { user.toLowerCase() }\n                        </li>\n                      )\n                    })\n                  }\n                </ol>\n              </div>\n            </>\n          )\n        }\n      </div>\n    );\n\n    return (\n        <Modal\n          ref={ modalRef }\n          open={ modalState }\n          title=\"Detalle del correo\"\n          body={ body() }\n          onClose={ resetModalWrapperState }\n          buttons={[\n              <Button variant=\"primary\" onClick={ resetModalWrapperState } data-autofocus >Cerrar</Button>\n          ]}\n          renderDefaultCloseButton={false}\n          dialogClassName=\"modal-lg\"\n        />\n    )\n}\n\nEmailModal.propTypes = {\n  email         : PropTypes.object.isRequired,\n  modalState    : PropTypes.bool.isRequired,\n  setModalState : PropTypes.func.isRequired\n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconButton } from '@edx/paragon';\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { EmailModal } from './EmailModal';\nexport const EmailItem = ( { email } ) => {\n\n    const [modalState, setModalState] = useState(false);\n\n    const openModal = () => setModalState(true);\n\n    return (\n        <div className=\"row border-bottom\">\n            <div className=\"col col-3 pt-2\">\n                { email.date }\n            </div>\n                \n            <div className=\"col col-3 pt-2 email-sender\">\n                { email.sender }\n            </div>\n                \n            <div className=\"col col-5 pt-2\">\n                { email.subject }\n            </div>\n                \n            <div className=\"col col-1\">\n                <IconButton icon={ faInfo } alt='Ver mayor información del correo' onClick={ openModal } variant=\"primary\"/>\n            </div> \n\n            {\n                modalState && <EmailModal email={email} modalState={modalState} setModalState={setModalState}/>\n            }\n\n        </div>\n    )\n}\n\nEmailItem.propTypes = {\n    email       : PropTypes.object.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\n\nexport const EmptyGrid = ( {title}) => {\n    return (\n        <div className=\"text-center\">\n            <FontAwesomeIcon icon={faFrown} className=\"h1\" />\n            <p>Al parecer no tienes { title.toLowerCase() }.</p>\n        </div>\n    )\n}\n\nEmptyGrid.propTypes = {\n    title       : PropTypes.string.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EmailItem } from './EmailItem';\nimport { EmptyGrid } from './EmptyGrid';\nimport { Spinner } from '@edx/paragon';\nimport { useFetchEmails } from '../hooks/useFetchUserData';\n\nexport const EmailGrid = ( { getEmails, title, courseId } ) => {\n\n    const { data, loading } = useFetchEmails( courseId, getEmails );\n    \n    const gridContent = () => {\n        if (data.length == 0) {\n            return (\n                <EmptyGrid title={ title } />\n            );\n        }\n        return (\n            <div className=\"email-grid\">\n                <div className=\"row font-weight-bold border-bottom py-2\">\n                    <div className=\"col col-3\">\n                        Fecha\n                    </div>\n                    <div className=\"col col-3\">\n                        Enviado por\n                    </div>\n                        \n                    <div className=\"col col-5\">\n                        Asunto\n                    </div>\n                        \n                    <div className=\"col col-1 text-center\">\n                        Detalle\n                    </div> \n                </div>\n                {\n                    data.map( (email, index) => (\n                        <EmailItem \n                            key={ index }\n                            email= { email }\n                        />\n                    ))\n                }\n            </div>\n        )\n    }\n\n\n    return (\n        <div className=\"rounded-lg shadow-lg py-4 px-5 my-2\">\n            <h3>{title}</h3>\n            { loading && <Spinner animation=\"border\" variant=\"primary\" className=\"d-flex mx-auto mt-2 \"/> }\n            { !loading && gridContent() }\n        </div>\n    )\n}\n\nEmailGrid.propTypes = {\n    getEmails   : PropTypes.func.isRequired,\n    title       : PropTypes.string.isRequired,\n    courseId       : PropTypes.string.isRequired\n}","import { useEffect } from 'react';\n\nvar lastHeight;\nvar lastWidth;\n\nexport const useResizeIFrame = () => {\n    useEffect(() => {\n        // Verify iframe\n        if (window !== window.parent) {\n            document.body.className += ' view-in-mfe';\n            lastHeight = window.offsetHeight;\n            lastWidth = window.offsetWidth;\n            // Create an observer instance linked to the callback function\n            const observer = new MutationObserver(dispatchResizeMessage);\n\n            // Start observing the target node for configured mutations\n            observer.observe(document.body, { attributes: true, childList: true, subtree: true });\n            window.addEventListener('load', dispatchResizeMessage);\n            window.addEventListener('resize', dispatchResizeMessage);\n        }\n        return () => {\n            window.removeEventListener('load', dispatchResizeMessage);\n            window.removeEventListener('resize', dispatchResizeMessage);\n        }\n    }, [ ]);\n    \n}\n\n\nconst dispatchResizeMessage = (event) => {\n    // Note: event is actually an Array of MutationRecord objects\n    // when fired from the MutationObserver\n    var eventType = event.type || 'mutate';\n    var newHeight = document.getElementById('content').offsetHeight;\n    var newWidth = document.getElementById('content').offsetWidth;\n\n    if (eventType !== 'load' && newWidth === lastWidth && newHeight === lastHeight) {\n        return;\n    }\n\n    window.parent.postMessage({\n        type: 'plugin.resize',\n        payload: {\n            width: newWidth,\n            height: newHeight,\n        }\n        }, document.referrer\n    );\n\n    lastHeight = newHeight;\n    lastWidth = newWidth;\n\n    // Within the learning microfrontend the iframe resizes to match the\n    // height of this document and it should never scroll. It does scroll\n    // ocassionally when javascript is used to focus elements on the page\n    // before the parent iframe has been resized to match the content\n    // height. This window.scrollTo is an attempt to keep the content at the\n    // top of the page. See TNL-7094\n    window.scrollTo(0, 0);\n}","/* \n* Async function that calls eol_course_email api \n* It will return a object with emails received \n*/\n\nexport const getReceivedEmails = async( courseId ) => {\n    const url = `/courses/${ courseId }/course_emails/received`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        const emails = data.map( e => {\n            return {\n                subject : e.subject,\n                message : e.message,\n                sender  : e.sender_user__profile__name.toLowerCase(),\n                date    : (new Date(e.created_at.$date)).toLocaleString('es-CL')\n            }\n        });\n        return emails;\n    } else {\n        return [];\n    }\n    \n};","/* \n* Async function that calls eol_course_email api \n* It will return a object with emails sended \n*/\n\nexport const getSendedEmails = async( courseId ) => {\n    const url = `/courses/${ courseId }/course_emails/sended`;\n    const response = await fetch(url, { credentials: \"same-origin\" });\n    if(response.status == 200) {\n        const data = await response.json();\n        const emails = data.map( e => {\n            return {\n                subject         : e.subject,\n                message         : e.message,\n                sender          : e.sender_user.toLowerCase(),\n                receiver_users  : e.receiver_users_list,\n                date            : (new Date(e.created_at.$date)).toLocaleString('es-CL')\n            }\n        });\n        return emails;\n    } else {\n        return [];\n    }\n};","import React from \"react\";\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\";\nimport Menu from \"./components/Menu\";\nimport { NewEmailForm } from \"./components/NewEmailForm\";\nimport { EmailGrid } from \"./components/EmailGrid\";\nimport { useResizeIFrame } from \"./hooks/useResizeIFrame\";\nimport { getReceivedEmails } from \"./helpers/getReceivedEmails\";\nimport { getSendedEmails } from \"./helpers/getSendedEmails\";\nimport { getCourseId } from \"./helpers/getCourseInfo\";\n\nexport default function CourseEmailPage() {\n  useResizeIFrame(); // Resize Iframe on height changes\n  const courseId = getCourseId();\n  return (\n    <div id=\"content\" className=\"container\">\n      <HashRouter>\n        <div>\n          <Menu courseId={courseId}/>\n          <Switch>\n            <Route exact path=\"/eol/eol_course_email/static/sended/\">\n              <EmailGrid getEmails={getSendedEmails} title=\"Correos Enviados\" courseId={ courseId }/>\n            </Route>\n            <Route exact path=\"/eol/eol_course_email/static/received/\">\n              <EmailGrid getEmails={getReceivedEmails} title=\"Correos Recibidos\" courseId={ courseId }/>\n            </Route>\n            <Route exact path=\"/eol/eol_course_email/static/new/\">\n              <NewEmailForm courseId={ courseId }/>\n            </Route>\n            <Route exact path=\"/eol/eol_course_email/static/:courseId/\">\n              <EmailGrid getEmails={getReceivedEmails} title=\"Correos Recibidos\" courseId={ courseId }/>\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}","/* \n* This hook will get course id from URL \n*   e.g: /eol/eol_course_email/static#/eol/eol_course_email/static/course-v1:eol+prueba03+2020\n*   course id will be course-v1:eol+prueba03+2020\n*/\n\nexport const getCourseId = ( ) =>  window.location.hash.substring(1).split(/[\\/]+/).pop();","export default __webpack_public_path__ + \"favicon.ico\";","import 'babel-polyfill';\n\nimport {\n  APP_INIT_ERROR, APP_READY, subscribe, initialize,\n} from '@edx/frontend-platform';\nimport { AppProvider, ErrorPage } from '@edx/frontend-platform/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport appMessages from './i18n';\nimport CourseEmailPage from './course_email/CourseEmailPage';\n\nimport './index.scss';\nimport './assets/favicon.ico';\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    <AppProvider>\n      <CourseEmailPage />\n    </AppProvider>,\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  messages: [\n    appMessages,\n  ],\n});\n"],"sourceRoot":""}